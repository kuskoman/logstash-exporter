name: Cleanup Untagged Images

on:
  # Commented out for testing purposes - will be uncommented later
  # schedule:
  #   # Run every Monday at 1:00 AM
  #   - cron: '0 1 * * 1'

  # For testing on this specific branch
  push:
    branches:
      - cleanup-untagged-images

  # Allow manual triggering
  workflow_dispatch:

permissions:
  packages: write
  contents: read

jobs:
  cleanup:
    name: Cleanup untagged container images
    runs-on: ubuntu-latest
    env:
      DRY_RUN: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List and analyze container images
        id: analyze_images
        run: |
          echo "Fetching ALL package versions..."

          # Set up variables for pagination
          PAGE=1
          PER_PAGE=100
          ALL_VERSIONS=()

          # GitHub repository owner (organization or user)
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
          echo "Repository owner: $REPO_OWNER"

          # Get all versions with pagination (both tagged and untagged)
          while true; do
            echo "Fetching page $PAGE..."

            # Get a page of package versions (all versions)
            PAGE_RESULT=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/$REPO_OWNER/packages/container/logstash-exporter/versions?per_page=$PER_PAGE&page=$PAGE")

            # If empty result or no elements in array, we've reached the end of pagination
            if [ -z "$PAGE_RESULT" ] || [ "$(echo "$PAGE_RESULT" | jq '. | length')" = "0" ]; then
              echo "No more results on page $PAGE"
              break
            fi

            # Append results to our array
            ALL_VERSIONS+=("$PAGE_RESULT")

            # Move to next page
            PAGE=$((PAGE + 1))
          done

          # Count total fetched versions
          echo "Fetched $(echo ${ALL_VERSIONS[@]} | jq -s 'add | length') total package versions"

          echo "Analyzing versions..."

          # Process versions - create three arrays:
          # 1. All versions details (for reporting)
          # 2. Versions to keep
          # 3. Versions to delete (untagged and older than 28 days)

          # Temporary files to store arrays
          ALL_DETAILS_FILE="all_version_details.json"
          VERSIONS_TO_KEEP_FILE="versions_to_keep.json"
          VERSIONS_TO_DELETE_FILE="versions_to_delete.json"

          # Initialize empty arrays
          echo "[]" > "$ALL_DETAILS_FILE"
          echo "[]" > "$VERSIONS_TO_KEEP_FILE"
          echo "[]" > "$VERSIONS_TO_DELETE_FILE"

          # Get the current date in ISO format
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Current date: $CURRENT_DATE"

          # Calculate cutoff date (28 days ago) in ISO format
          CUTOFF_DATE=$(date -u -d "28 days ago" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Cutoff date: $CUTOFF_DATE"

          # Process all fetched versions
          KEEP_COUNTER=0
          DELETE_COUNTER=0

          for page_result in "${ALL_VERSIONS[@]}"; do
            if [ -z "$page_result" ]; then continue; fi

            # Process each version in this page
            echo "$page_result" | jq -c '.[]' | while read -r version; do
              VERSION_ID=$(echo "$version" | jq -r '.id')
              CREATED_AT=$(echo "$version" | jq -r '.created_at')
              NAME=$(echo "$version" | jq -r '.name')
              TAGS=$(echo "$version" | jq -r '.metadata.container.tags | join(", ")')
              HAS_TAGS=$(echo "$version" | jq -r '.metadata.container.tags | length > 0')

              # Create a detailed record for reporting
              DETAIL=$(echo "{}" | jq \
                --arg id "$VERSION_ID" \
                --arg name "$NAME" \
                --arg created "$CREATED_AT" \
                --arg tags "$TAGS" \
                --argjson has_tags "$HAS_TAGS" \
                '. + {id: $id, name: $name, created_at: $created, tags: $tags, has_tags: $has_tags}')

              # Add to all details
              ALL_DETAILS=$(jq --argjson detail "$DETAIL" '. + [$detail]' "$ALL_DETAILS_FILE")
              echo "$ALL_DETAILS" > "$ALL_DETAILS_FILE"

              # Decide whether to keep or delete based on tags and age
              if [ "$HAS_TAGS" = "true" ]; then
                # Always keep tagged versions
                echo "Keeping tagged version $VERSION_ID ($NAME) with tags: $TAGS"
                KEEP=$(jq --argjson detail "$DETAIL" '. + [$detail]' "$VERSIONS_TO_KEEP_FILE")
                echo "$KEEP" > "$VERSIONS_TO_KEEP_FILE"
                KEEP_COUNTER=$((KEEP_COUNTER + 1))
              elif [[ "$CREATED_AT" < "$CUTOFF_DATE" ]]; then
                # Delete untagged versions older than 28 days
                echo "Marking for deletion: Version $VERSION_ID ($NAME) created at $CREATED_AT (older than 28 days)"
                DELETE=$(jq --argjson detail "$DETAIL" '. + [$detail]' "$VERSIONS_TO_DELETE_FILE")
                echo "$DELETE" > "$VERSIONS_TO_DELETE_FILE"
                DELETE_COUNTER=$((DELETE_COUNTER + 1))
              else
                # Keep untagged versions newer than 28 days
                echo "Keeping recent untagged version $VERSION_ID ($NAME) created at $CREATED_AT"
                KEEP=$(jq --argjson detail "$DETAIL" '. + [$detail]' "$VERSIONS_TO_KEEP_FILE")
                echo "$KEEP" > "$VERSIONS_TO_KEEP_FILE"
                KEEP_COUNTER=$((KEEP_COUNTER + 1))
              fi
            done
          done

          echo "Analysis complete:"
          echo "- Total versions: $((KEEP_COUNTER + DELETE_COUNTER))"
          echo "- Versions to keep: $KEEP_COUNTER"
          echo "- Versions to delete: $DELETE_COUNTER"

          # Extract just the IDs for the delete action
          DELETE_IDS=$(jq -c '[.[] | .id]' "$VERSIONS_TO_DELETE_FILE")
          echo "versions_to_delete=$DELETE_IDS" >> $GITHUB_OUTPUT

          # Save full details for the dry run step
          echo "versions_to_keep=$(cat $VERSIONS_TO_KEEP_FILE)" >> $GITHUB_OUTPUT
          echo "versions_to_delete_details=$(cat $VERSIONS_TO_DELETE_FILE)" >> $GITHUB_OUTPUT
          echo "all_version_details=$(cat $ALL_DETAILS_FILE)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dry run - Display detailed analysis
        run: |
          echo "=================== DRY RUN ANALYSIS ==================="

          # Count different types of versions
          TOTAL_COUNT=$(echo '${{ steps.analyze_images.outputs.all_version_details }}' | jq 'length')
          DELETE_COUNT=$(echo '${{ steps.analyze_images.outputs.versions_to_delete }}' | jq 'length')
          KEEP_COUNT=$(echo '${{ steps.analyze_images.outputs.versions_to_keep }}' | jq 'length')

          echo "Total versions analyzed: $TOTAL_COUNT"
          echo "Versions to keep: $KEEP_COUNT"
          echo "Versions to delete: $DELETE_COUNT"

          echo ""
          echo "-------------- VERSIONS TO BE DELETED ----------------"
          echo '${{ steps.analyze_images.outputs.versions_to_delete_details }}' | \
            jq -r '.[] | "ID: \(.id) | Created: \(.created_at) | \(.name)"' | sort

          echo ""
          echo "-------------- VERSIONS TO BE KEPT ------------------"
          echo '${{ steps.analyze_images.outputs.versions_to_keep }}' | \
            jq -r '.[] | "ID: \(.id) | Created: \(.created_at) | Tags: \(.tags) | \(.name)"' | sort

          echo ""
          echo "This is a DRY RUN. No images will be deleted."
          echo "To perform actual deletion, set DRY_RUN to 'false' and uncomment the deletion step."
          echo "======================================================"

      # Uncomment this step to actually delete the versions when ready
      # - name: Delete filtered package versions
      #   if: env.DRY_RUN == 'false' && fromJSON(steps.analyze_images.outputs.versions_to_delete) != []
      #   uses: actions/delete-package-versions@v4
      #   with:
      #     package-name: 'logstash-exporter'
      #     package-type: 'container'
      #     package-version-ids: ${{ steps.analyze_images.outputs.versions_to_delete }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
