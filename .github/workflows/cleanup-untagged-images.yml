name: Cleanup Untagged Images

on:
  # Commented out for testing purposes - will be uncommented later
  # schedule:
  #   # Run every Monday at 1:00 AM
  #   - cron: '0 1 * * 1'

  # For testing on this specific branch
  push:
    branches:
      - cleanup-untagged-images

  # Allow manual triggering
  workflow_dispatch:

permissions:
  packages: write
  contents: read

jobs:
  cleanup:
    name: Cleanup untagged container images
    runs-on: ubuntu-latest
    env:
      DRY_RUN: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List and filter untagged images
        id: filter_images
        run: |
          echo "Fetching package versions..."
          # Get all untagged versions of the package
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/logstash-exporter/versions \
            --jq '.[] | select(.metadata.container.tags | length == 0) | {id: .id, created_at: .created_at}')

          echo "Filtering versions older than 28 days..."
          # Get the current date in ISO format
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Current date: $CURRENT_DATE"

          # Calculate cutoff date (28 days ago) in ISO format
          CUTOFF_DATE=$(date -u -d "28 days ago" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Cutoff date: $CUTOFF_DATE"

          # Initialize an array to store IDs of versions to delete
          VERSIONS_TO_DELETE=()

          # For debugging
          echo "Untagged versions found:"
          echo "$VERSIONS" | grep -v "^$" | jq '.'

          # Process each version
          COUNTER=0
          while IFS= read -r line; do
            if [ -z "$line" ]; then continue; fi

            VERSION_ID=$(echo "$line" | jq -r '.id')
            CREATED_AT=$(echo "$line" | jq -r '.created_at')

            # Simple string comparison for dates in ISO format (YYYY-MM-DDTHH:MM:SSZ)
            if [[ "$CREATED_AT" < "$CUTOFF_DATE" ]]; then
              echo "Version $VERSION_ID created at $CREATED_AT is older than 28 days"
              VERSIONS_TO_DELETE+=("$VERSION_ID")
              COUNTER=$((COUNTER + 1))
            else
              echo "Version $VERSION_ID created at $CREATED_AT is newer than 28 days"
            fi
          done < <(echo "$VERSIONS" | grep -v "^$")

          echo "Found $COUNTER untagged versions older than 28 days"

          # Create a proper JSON array from the bash array and convert to a compact single line
          JSON_ARRAY=$(printf '%s\n' "${VERSIONS_TO_DELETE[@]}" | jq -R . | jq -c -s .)
          echo "versions_to_delete=$JSON_ARRAY" >> $GITHUB_OUTPUT

          # Debug: show the final JSON for readability
          echo "Final JSON array of versions to delete (pretty):"
          echo "$JSON_ARRAY" | jq .
          echo "Final JSON array of versions to delete (compact):"
          echo "$JSON_ARRAY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dry run - Display versions that would be deleted
        run: |
          echo "DRY RUN: The following versions would be deleted:"
          echo '${{ steps.filter_images.outputs.versions_to_delete }}' | jq .
          echo "To actually delete these versions, change DRY_RUN to 'false' in the workflow"
          VERSION_COUNT=$(echo '${{ steps.filter_images.outputs.versions_to_delete }}' | jq 'length')
          echo "Found $VERSION_COUNT versions to delete"

      # Uncomment this step to actually delete the versions when ready
      # - name: Delete filtered package versions
      #   if: env.DRY_RUN == 'false' && fromJSON(steps.filter_images.outputs.versions_to_delete) != []
      #   uses: actions/delete-package-versions@v4
      #   with:
      #     package-name: 'logstash-exporter'
      #     package-type: 'container'
      #     package-version-ids: ${{ steps.filter_images.outputs.versions_to_delete }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
