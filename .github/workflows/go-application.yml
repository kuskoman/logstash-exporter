name: Go application CI/CD

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master

env:
  GOLANGCI_LINT_VERSION: v1.51.1
  TAG_NAME: "${GITHUB_REF##*/}"

permissions:
  contents: read
  packages: write

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20"

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin ${GOLANGCI_LINT_VERSION}

      - name: Lint code
        run: golangci-lint run

  test:
    name: Unit test code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20"

      - name: Test code
        run: go test ./... -covermode=atomic -coverprofile=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  test-integration:
    name: Test integration with Prometheus
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.15.1
          legacy: true

      - name: Print compose version
        run: docker-compose version

      - name: Wait for compose
        run: make wait-for-compose

      - name: Run metrics integration test
        run: make verify-metrics

      - name: Shutdown compose
        run: docker-compose down -v

  build-linux:
    name: Build Linux binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20"

      - name: Build Linux binary
        run: make build-linux

      - name: Upload Linux binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: logstash-exporter-linux
          path: out/main-linux

  build-darwin:
    name: Build Mac binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20"

      - name: Build Mac binary
        run: make build-darwin

      - name: Upload Mac binary
        uses: actions/upload-artifact@v3
        with:
          name: logstash-exporter-darwin
          path: out/main-darwin

  build-windows:
    name: Build Windows binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20"

      - name: Build Windows binary
        run: make build-windows

      - name: Upload Windows binary
        uses: actions/upload-artifact@v3
        with:
          name: logstash-exporter-windows
          path: out/main-windows

  build-linux-docker-image:
    name: Build Linux Docker image
    runs-on: ubuntu-20.04
    needs: [build-linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub registry
        if: github.ref == 'refs/heads/master'
        run: echo ${{ secrets.GH_PAT }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ${{ secrets.DOCKER_HUB_PAT }} | docker login -u ${{ github.repository_owner }} --password-stdin

      - name: Tag Docker image with master
        if: github.ref == 'refs/heads/master'
        run: echo "ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:master" >> .tags

      - name: Tag Docker image with tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ env.TAG_NAME }}" >> .tags

      - name: Fetch Docker tags from file
        run: echo "tags_to_push=$(paste -sd \",\" .tags)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ env.tags_to_push != '' }}
          tags: ${{ env.tags_to_push }}
  create-release:
    name: Create GitHub release
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      packages: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    needs: [build-linux, build-darwin, build-windows, build-linux-docker-image]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Output tag information
        run: |
          echo "Tag name: ${{ env.TAG_NAME }}"
          echo "Tag ref: ${{ github.ref }}"
      - name: Generate release notes
        run: ./scripts/create_release_notes.sh
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: "./release_notes.txt"
          draft: false
          prerelease: false

  upload-binaries:
    strategy:
      matrix:
        binary: [linux, darwin, windows]
    runs-on: ubuntu-20.04
    needs:
      - create-release
      - build-linux
      - build-darwin
      - build-windows
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: logstash-exporter-${{ matrix.binary }}
      - name: Generate sha256 checksum
        run: |
          CHECKSUM_FILE="logstash-exporter-${{ matrix.binary }}/main-${{ matrix.binary }}.sha256"
          sha256sum logstash-exporter-${{ matrix.binary }}/main-${{ matrix.binary }} | cut -d ' ' -f1 | tr -d $'\n' > "$CHECKSUM_FILE"
          echo -n '  logstash-exporter-${{ matrix.binary }}' >> "$CHECKSUM_FILE"
      - name: Upload binary to GitHub release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./logstash-exporter-${{ matrix.binary }}/main-${{ matrix.binary }}
          asset_name: logstash-exporter-${{ matrix.binary }}
          asset_content_type: application/octet-stream
      - name: Upload sha256 checksum to GitHub release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./logstash-exporter-${{ matrix.binary }}/main-${{ matrix.binary }}.sha256
          asset_name: logstash-exporter-${{ matrix.binary }}.sha256
          asset_content_type: text/plain
